# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

'scopeName': 'source.kumachan'
'name': 'KumaChan'
'comment': 'KumaChan language'
'fileTypes': [
  'km'
]
'foldingStartMarker': '({|\\()\\s*$'
'foldingStopMarker': '(}|\\))\\s*$'
'patterns': [
  {
    'begin': '/\\*'
    'captures':
      '0':
        'name': 'punctuation.definition.comment.km'
    'end': '\\*/'
    'name': 'comment.block.km'
  }
  {
    'captures':
      '1':
        'name': 'punctuation.definition.comment.km'
    'match': '(//).*$\\n?'
    'name': 'comment.line.double-slash.km'
  }
  {
    'name': 'constant.numeric.km'
    'match': '\\^["\']'
  }
  {
    'comment': 'double quoted string literal'
    'begin': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.km'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.km'
    'name': 'string.quoted.double.km'
  }
  {
    'comment': 'single quoted string literal'
    'begin': '\''
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.km'
    'end': '\''
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.km'
    'name': 'string.quoted.single.km'
  }
  {
    'name': 'constant.numeric.km'
    'match': '\\^.'
  }
  {
    'name': 'constant.numeric.km'
    'match': '\\b(\\d+)\\b'
  }
  {
    'name': 'constant.numeric.km'
    'match': '(\\.\\d+([Ee][\-\+]\\d+)?)\\b'
  }
  {
    'name': 'constant.numeric.km'
    'match': '\\b\\d+\\.\\d*(([Ee][\-\+]\\d+)?\\b)?'
  }
  {
    'name': 'constant.numeric.km'
    'match': '\\b(0x[0-9a-fA-F]+)\\b'
  }
  {
    'comment': 'pipeline call'
    'match': '(\\|)\\s*([^;:,\\$\\#\\@\\&"\'\\(\\)\\{\\}\\[\\]\\s]+)'
    'captures':
      '1':
        'name': 'keyword.control.km'
      '2':
        'name': 'entity.name.function'
  }
  {
    'comment': 'function definition'
    'match': '\\b(function)\\s+([^;:,\\$\\#\\@\\&"\'\\(\\)\\{\\}\\[\\]\\s]+)[^\\:]*\\:'
    'captures':
      '1':
        'name': 'keyword.control.km'
      '2':
        'name': 'entity.name.function'
  }
  {
    'comment': 'macro definition'
    'match': '\\b(macro)\\s+([^;:,\\$\\#\\@\\&"\'\\(\\)\\{\\}\\[\\]\\s]+)'
    'captures':
      '1':
        'name': 'keyword.control.km'
      '2':
        'name': 'entity.name.function'
  }
  {
    'comment': 'constant definition'
    'match': '\\b(const)\\s+([^;:,\\$\\#\\@\\&"\'\\(\\)\\{\\}\\[\\]\\s]+)\\s*:'
    'captures':
      '1':
        'name': 'keyword.control.km'
      '2':
        'name': 'constant.language.km'
  }
  {
    'name': 'constant.language.km'
    'match': '\\b(Yes|No|Just|N/A|OK|NG)\\b'
  }
  {
    'name': 'keyword.control.km'
    'match': '\\b(import|from|type|union|native|as|protected|opaque|private|public|function|const|macro|do|if|elif|else|switch\\*|switch|end|case|default|lambda|let|rec)\\b'
  }
  {
    'name': 'keyword.control.km'
    'match': ':=|~|\\|'
  }
  {
    'name': 'entity.name.tag'
    'match': '(\\&|\\$|\\(|\\))'
  }
  {
    'match': ','
    'name': 'punctuation.other.comma.go'
  }
  {
    'match': '\\.(?![\\{\\[])'
    'name': 'punctuation.other.period.go'
  }
  {
    'match': ':'
    'name': 'punctuation.other.colon.go'
  },
]
