# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

'scopeName': 'source.kumachan'
'name': 'KumaChan'
'comment': 'KumaChan language'
'fileTypes': [
  'k'
]
'foldingStartMarker': '({|\\()\\s*$'
'foldingStopMarker': '(}|\\))\\s*$'
'patterns': [
  {
    'begin': '/\\*'
    'captures':
      '0':
        'name': 'punctuation.definition.comment.k'
    'end': '\\*/'
    'name': 'comment.block.k'
  }
  {
    'captures':
      '1':
        'name': 'punctuation.definition.comment.k'
    'match': '(//).*$\\n?'
    'name': 'comment.line.double-slash.k'
  }
  {
    'comment': 'triple quoted string literal'
    'begin': '\'\'\''
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.k'
    'end': '\'\'\''
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.k'
    'name': 'string.quoted.triple.k'
  }
  {
    'comment': 'double quoted string literal'
    'begin': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.k'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.k'
    'name': 'string.quoted.double.k'
  }
  {
    'comment': 'single quoted string literal'
    'begin': '\''
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.k'
    'end': '\''
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.k'
    'name': 'string.quoted.single.k'
  }
  {
    'name': 'constant.numeric.k'
    'match': '\\b(\\d+)\\b'
  }
  {
    'name': 'constant.numeric.k'
    'match': '(\\.\\d+([Ee][\-\+]\\d+)?)\\b'
  }
  {
    'name': 'constant.numeric.k'
    'match': '\\b\\d+\\.\\d*(([Ee][\-\+]\\d+)?\\b)?'
  }
  {
    'name': 'constant.numeric.k'
    'match': '\\b(0x[0-9a-fA-F]+)\\b'
  }
  {
    'comment': 'lambda definition syntax'
    'match': '\\b(lambda)[\\t ]*\\('
    'captures':
      '1':
        'name': 'keyword.function.k'
  }
  {
    'comment': 'function call/definition syntax'
    'match': '\\b([^\\(\\)\\{\\}\\[\\]<>\\- \\t]+)[\\t ]*\\('
    'captures':
      '1':
        'name': 'entity.name.function'
  }
  {
    'comment': 'method call syntax (without parentheses)'
    'match': '\\b\\->\\s*([^\\(\\)\\{\\}\\[\\]<>\\-\\s]+)\\s*\\->'
    'captures':
      '1':
        'name': 'entity.name.function'
  }
  {
    'name': 'keyword.root.k'
    'match': '\\b(module|export|include|import|from|as)\\b'
  }
  {
    'name': 'keyword.control.k'
    'match': '\\b(if|else|elif|switch|otherwise|while|for|in|break|continue|return|yield|await)\\b'
  }
  {
    'name': 'keyword.scope.k'
    'match': '\\b(let|type|singleton|var|reset|set|do|nothing)\\b'
  }
  {
    'name': 'keyword.function.k'
    'match': '\\b(function|async|lambda|invoke|iterator|promise|observer|static|mock|handle)\\b'
  }
  {
    'name': 'keyword.error.k'
    'match': '\\b(throw|assert|ensure|try|to|unless|failed|finally|panic)\\b'
  }
  {
    'name': 'keyword.misc.k'
    'match': '\\b(where|when|match|tree|struct|fields|config|operator|guard|one|of|enum)\\b'
  }
  {
    'name': 'keyword.oo.k'
    'match': '\\b(class|init|create|private|data|interface)\\b'
  }
  {
    'name': 'keyword.operators.k',
    'match': '\\b(str|len|copy|negate|prms|iter|obsv|async_iter|mount|push|is|or|not)\\b'
  }
  {
    'name': 'constant.language.k'
    'match': '\\b(true|false|Void|Nil|NotFound)\\b'
  }
  {
    'match': ','
    'name': 'punctuation.other.comma.go'
  }
  {
    'match': '\\.(?![\\{\\[])'
    'name': 'punctuation.other.period.go'
  }
  {
    'match': ':'
    'name': 'punctuation.other.colon.go'
  }
]
