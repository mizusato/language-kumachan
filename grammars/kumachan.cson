# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

'scopeName': 'source.kumachan'
'name': 'KumaChan'
'comment': 'KumaChan language'
'type': 'tree-sitter'
'parser': 'tree-sitter-kumachan'
'fileTypes': [
  'km'
]
'scopes':
  '''
    "import",
    "from",
    "type",
    "union",
    "native",
    "as",
    "protected",
    "opaque",
    "private",
    "public",
    "function",
    "const",
    "macro",
    "do",
    "switch*",
    "switch",
    "case",
    "default",
    "end",
    "if",
    "elif",
    "else",
    "let",
    "rec",
    "|",
    "~",
    ".",
    ";",
    ":",
    ":="
  ''': 'keyword.control'
  '"(", ")", "[", "]"': 'entity.name.tag'
  'comment': 'comment.block'
  'string_text': 'string.quoted.single'
  'formatter_text': 'string.quoted.double'
  'int': 'constant.numeric'
  'float': 'constant.numeric'
  'char': 'constant.character'
  'decl_const > name': 'constant.other'
  'decl_func > name': 'entity.name.function'
  'decl_macro > name': 'entity.name.function'
  'decl_type > name': 'entity.name.type'
  'infix > operator': 'entity.name.function'
  'infix > "$"': 'entity.name.tag'
  'type_ref > name': 'entity.name.type'
  'type_ref > module_prefix': 'entity.name.type'
  'type_params > name': 'entity.name.type'
  'pipeline > pipe_func': 'entity.name.function'
  'callee > term > inline_ref > name': 'entity.name.function'
  'callee > term > inline_ref > module_prefix': 'entity.name.function'
  'lambda_header': 'entity.name.tag'
  'field > name': 'entity.name.tag'
  'pair > name': 'entity.name.tag'
  'cps > inline_ref > name': 'entity.name.function'
'folds': [
  {
    'type': 'comment'
  }
  {
    'type': 'decl_type'
  }
  {
    'type': 'decl_const'
  }
  {
    'type': 'decl_func'
  }
  {
    'type': 'decl_macro'
  }
  {
    'type': 'multi_switch'
  }
  {
    'type': 'switch'
  }
  {
    'type': 'if'
  }
  {
    'type': 'block'
  }
]
